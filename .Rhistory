likelihood<-rep(NA, length(thetas))
count<-1
for(i in thetas){
fx<-dunif(obs, min=0, max=i)
likelihood[count]<-prod(fx)
count<-count+1
}
val<-max(likelihood)
index<-which(likelihood==val)
mle<-thetas[index]
mle-2
}
ns<-seq(1,50, by=1)
sim_biases<-rep(NA, 50)
count<-1
for(i in ns){
biases<-replicate(1000,one_bias(i))
bias<-mean(biases)
sim_biases[count]<-bias
count<- count+1
}
plot(ns, sim_biases)
one_mle<-function(n){
obs<-runif(n, min=0, max=2)
thetas<-seq(from=0.01, to=10, by=.01)
likelihood<-rep(NA, length(thetas))
count<-1
for(i in thetas){
fx<-dunif(obs, min=0, max=i)
likelihood[count]<-prod(fx)
count<-count+1
}
val<-max(likelihood)
index<-which(likelihood==val)
thetas[index]
}
one_mse<-function(n){
mles<-replicate(1000,one_mle(n))
theta_hat<-mean(mles)
diffs<-rep(NA, 1000)
count<-1
for(i in mles){
diff<-(i-theta_hat)^2
diffs[count]<-diff
count<-count+1
}
variance<-(sum(diffs)/(length(diffs)-1))
mse<-variance+(bias^2)
mse
}
sim_mses<-rep(NA, 50)
count<-1
for(i in ns){
sim_mses[count]<-one_mse(i)
count<- count+1
}
plot(ns, sim_mses)
plot(ns, sim_mses)
plot(ns, sim_biases)
one_bias<-function(n){
obs<-runif(n, min=0, max=2)
thetas<-seq(from=0.01, to=10, by=.01)
likelihood<-rep(NA, length(thetas))
count<-1
for(i in thetas){
fx<-dunif(obs, min=0, max=i)
likelihood[count]<-prod(fx)
count<-count+1
}
val<-max(likelihood)
index<-which(likelihood==val)
mle<-thetas[index]
mle-2
}
ns<-seq(1,50, by=1)
sim_biases<-rep(NA, 50)
count<-1
for(i in ns){
biases<-replicate(1000,one_bias(i))
bias<-mean(biases)
sim_biases[count]<-bias
count<- count+1
}
plot(ns, sim_biases, xlab='Sample Size', ylab='Bias', type='l')
one_mle<-function(n){
obs<-runif(n, min=0, max=2)
thetas<-seq(from=0.01, to=10, by=.01)
likelihood<-rep(NA, length(thetas))
count<-1
for(i in thetas){
fx<-dunif(obs, min=0, max=i)
likelihood[count]<-prod(fx)
count<-count+1
}
val<-max(likelihood)
index<-which(likelihood==val)
thetas[index]
}
one_mse<-function(n){
mles<-replicate(1000,one_mle(n))
theta_hat<-mean(mles)
diffs<-rep(NA, 1000)
count<-1
for(i in mles){
diff<-(i-theta_hat)^2
diffs[count]<-diff
count<-count+1
}
variance<-(sum(diffs)/(length(diffs)-1))
mse<-variance+(bias^2)
mse
}
sim_mses<-rep(NA, 50)
count<-1
for(i in ns){
sim_mses[count]<-one_mse(i)
count<- count+1
}
plot(ns, sim_mses, xlab="Sample Size", ylab='MSE', type='l')
one_draw_x<-function(){
2*sqrt(rnorm(1)^2 + rnorm(1)^2)
}
one_sample<-function(n){
replicate(n, one_draw_x())
}
mu_hat<-function(n){
data<-replicate(n, one_draw_x())
sqrt((pi/4)*(sum(data^2)/n))
}
one_sample_mean<-function(n){
mean(replicate(n, one_draw_x()))
}
sample_means<- replicate(10000, one_sample_mean(5))
biases_means<-rep(NA, 10000)
count<-1
for(i in sample_means){
biases_means[count]<- i-2*sqrt(pi/2)
count<-count+1
}
bias_mean<-mean(biases_means)
print("The mean bias for the sample mean is:")
bias_mean
muhat_means<- replicate(1000, mu_hat(5))
biases_muhat<-rep(NA, 1000)
count<-1
for(i in muhat_means){
biases_muhat[count]<- i-2*sqrt(pi/2)
count<-count+1
}
bias_muhat<-mean(biases_muhat)
print("The mean bias for muhat is:")
bias_muhat
variances_mean<-rep(NA, 1000)
variances_muhat<-rep(NA,1000)
one_variance<-function(n){
data<-replicate(n, one_draw_x())
var(data)
}
for(i in 1:1000){
variances_mean[i]<-one_variance(5)
}
variance_mean<-mean(variances_mean)
print("The mean variance for the sample mean is:")
variance_mean
variance_muhat<-function(n){
data<-replicate(n, one_draw_x())
sqrt((pi/4)*(sum(data^4)/n))-((pi/4)*(sum(data^2)/n))
}
variances_muhat<- replicate(1000, variance_muhat(5))
print("The mean variance for muhat is:")
muhat_variance<-mean(variances_muhat)
muhat_variance
mean_mse<- variance_mean+bias_mean^2
muhat_mse<-muhat_variance+bias_muhat^2
print("The MSE for the sample mean is:")
mean_mse
print("The MSE for muhat is:")
muhat_mse
one_draw_x<-function(){
2*sqrt(rnorm(1)^2 + rnorm(1)^2)
}
one_sample<-function(n){
replicate(n, one_draw_x())
}
mu_hat<-function(n){
data<-replicate(n, one_draw_x())
sqrt((pi/4)*(sum(data^2)/n))
}
one_sample_mean<-function(n){
mean(replicate(n, one_draw_x()))
}
sample_means<- replicate(10000, one_sample_mean(5))
biases_means<-rep(NA, 10000)
count<-1
for(i in sample_means){
biases_means[count]<- i-2*sqrt(pi/2)
count<-count+1
}
bias_mean<-mean(biases_means)
print("The mean bias for the sample mean is:")
bias_mean
muhat_means<- replicate(10000, mu_hat(5))
biases_muhat<-rep(NA, 10000)
count<-1
for(i in muhat_means){
biases_muhat[count]<- i-2*sqrt(pi/2)
count<-count+1
}
bias_muhat<-mean(biases_muhat)
print("The mean bias for muhat is:")
bias_muhat
variances_mean<-rep(NA, 1000)
variances_muhat<-rep(NA,1000)
one_variance<-function(n){
data<-replicate(n, one_draw_x())
var(data)
}
for(i in 1:1000){
variances_mean[i]<-one_variance(5)
}
variance_mean<-mean(variances_mean)
print("The mean variance for the sample mean is:")
variance_mean
variance_muhat<-function(n){
data<-replicate(n, one_draw_x())
sqrt((pi/4)*(sum(data^4)/n))-((pi/4)*(sum(data^2)/n))
}
variances_muhat<- replicate(1000, variance_muhat(5))
print("The mean variance for muhat is:")
muhat_variance<-mean(variances_muhat)
muhat_variance
mean_mse<- variance_mean+bias_mean^2
muhat_mse<-muhat_variance+bias_muhat^2
print("The MSE for the sample mean is:")
mean_mse
print("The MSE for muhat is:")
muhat_mse
one_draw_x<-function(){
2*sqrt(rnorm(1)^2 + rnorm(1)^2)
}
one_sample<-function(n){
replicate(n, one_draw_x())
}
mu_hat<-function(n){
data<-replicate(n, one_draw_x())
sqrt((pi/4)*(sum(data^2)/n))
}
one_sample_mean<-function(n){
mean(replicate(n, one_draw_x()))
}
sample_means<- replicate(10000, one_sample_mean(5))
biases_means<-rep(NA, 10000)
count<-1
for(i in sample_means){
biases_means[count]<- i-2*sqrt(pi/2)
count<-count+1
}
bias_mean<-mean(biases_means)
print("The mean bias for the sample mean is:")
bias_mean
muhat_means<- replicate(10000, mu_hat(5))
biases_muhat<-rep(NA, 10000)
count<-1
for(i in muhat_means){
biases_muhat[count]<- i-2*sqrt(pi/2)
count<-count+1
}
bias_muhat<-mean(biases_muhat)
print("The mean bias for muhat is:")
bias_muhat
variances_mean<-rep(NA, 10000)
variances_muhat<-rep(NA,10000)
one_variance<-function(n){
data<-replicate(n, one_draw_x())
var(data)
}
for(i in 1:10000){
variances_mean[i]<-one_variance(5)
}
variance_mean<-mean(variances_mean)
print("The mean variance for the sample mean is:")
variance_mean
variance_muhat<-function(n){
data<-replicate(n, one_draw_x())
sqrt((pi/4)*(sum(data^4)/n))-((pi/4)*(sum(data^2)/n))
}
variances_muhat<- replicate(10000, variance_muhat(5))
print("The mean variance for muhat is:")
muhat_variance<-mean(variances_muhat)
muhat_variance
mean_mse<- variance_mean+bias_mean^2
muhat_mse<-muhat_variance+bias_muhat^2
print("The MSE for the sample mean is:")
mean_mse
print("The MSE for muhat is:")
muhat_mse
var(muhat_means)
var(sample_means)
keep = NULL
n=10
for(i in 1:1000){
x = rnorm(n, mean=5, sd=3)
keep[i]<-mean(x)
}
hist(keep, breaks=50, freq=FALSE)
keep = NULL
n=10
for(i in 1:1000){
x = rnorm(n, mean=5, sd=3)
keep[i]<-mean(x)
}
hist(keep, breaks=50, freq=FALSE)
z = seq(0, 10, by=.01)
lines(z, dnorm(z, mean=5, sd=3))
keep = NULL
n=10
for(i in 1:1000){
x = rnorm(n, mean=5, sd=3)
keep[i]<-mean(x)
}
hist(keep, breaks=50, freq=FALSE)
z = seq(0, 10, by=.01)
lines(z, dnorm(z, mean=0, sd=1))
hist(keep, breaks=50, freq=FALSE, xlim= c(-10,10))
z = seq(0, 10, by=.01)
lines(z, dnorm(z, mean=0, sd=1))
hist(keep, breaks=50, freq=FALSE, xlim= c(-10,10))
z = seq(-10, 10, by=.01)
lines(z, dnorm(z, mean=0, sd=1))
lines(z, dnorm(z, mean=5, sd=1))
lines(z, dnorm(z, mean=5, sd=1), col='blue')
hist(keep, breaks=50, freq=FALSE, xlim= c(-10,10))
z = seq(-10, 10, by=.01)
lines(z, dnorm(z, mean=5, sd=1), col='blue')
hist(keep, breaks=50, freq=FALSE, xlim= c(0,10))
z = seq(-10, 10, by=.01)
lines(z, dnorm(z, mean=5, sd=1), col='blue')
lines(z, dnorm(z, mean=mean(keep), sd=sd(keep), col='red')
lines(z, dnorm(z, mean=mean(keep), sd=sd(keep), col='red')
lines(z, dnorm(z, mean=mean(keep), sd=sd(keep)), col='red')
sd(keep)
sqrt(3/10)
sqrt(9/10)
keep = NULL
n=10
for(i in 1:1000){
x = rnorm(n, mean=5, sd=3)
keep[i]<-mean(x)
}
hist(keep, breaks=50, freq=FALSE, xlim= c(0,10))
z = seq(-10, 10, by=.01)
lines(z, dnorm(z, mean=5, sd=sqrt(9/10)), col='blue')
lines(z, dnorm(z, mean=mean(keep), sd=sd(keep)), col='red')
keep = NULL
n=100
for(i in 1:1000){
x = rnorm(n, mean=5, sd=3)
keep[i]<-mean(x)
}
hist(keep, breaks=50, freq=FALSE, xlim= c(0,10))
z = seq(-10, 10, by=.01)
lines(z, dnorm(z, mean=5, sd=sqrt(9/10)), col='blue')
lines(z, dnorm(z, mean=mean(keep), sd=sd(keep)), col='red')
keep = NULL
n=100
for(i in 1:1000){
x = rnorm(n, mean=5, sd=3)
keep[i]<-mean(x)
}
hist(keep, breaks=50, freq=FALSE, xlim= c(0,10))
z = seq(-10, 10, by=.01)
lines(z, dnorm(z, mean=5, sd=sqrt(9/n)), col='blue')
lines(z, dnorm(z, mean=mean(keep), sd=sd(keep)), col='red')
keep = NULL
n=100
for(i in 1:1000){
x = rnorm(n, mean=5, sd=3)
keep[i]<-mean(x)
}
hist(keep, breaks=50, freq=FALSE))
keep = NULL
n=100
for(i in 1:1000){
x = rnorm(n, mean=5, sd=3)
keep[i]<-mean(x)
}
hist(keep, breaks=50, freq=FALSE)
z = seq(-10, 10, by=.01)
lines(z, dnorm(z, mean=5, sd=sqrt(9/n)), col='blue')
lines(z, dnorm(z, mean=mean(keep), sd=sd(keep)), col='red')
keep = NULL
n=1000
for(i in 1:1000){
x = rnorm(n, mean=5, sd=3)
keep[i]<-mean(x)
}
hist(keep, breaks=50, freq=FALSE)
z = seq(-10, 10, by=.01)
lines(z, dnorm(z, mean=5, sd=sqrt(9/n)), col='blue')
lines(z, dnorm(z, mean=mean(keep), sd=sd(keep)), col='red')
#| output: false
require(UsingR)
require(tgsify)
require(rms)
require(dplyr)
require(olsrr)
require(validate)
require(knitr)
require(kableExtra)
require(sjPlot)
require(ggplot2)
require(table1)
#| output: false
require(UsingR)
require(tgsify)
require(rms)
require(dplyr)
require(olsrr)
require(validate)
require(knitr)
require(kableExtra)
require(sjPlot)
require(ggplot2)
require(table1)
df<-read.csv('BRFSS_clean')
#| output: false
require(UsingR)
require(tgsify)
require(rms)
require(dplyr)
require(olsrr)
require(validate)
require(knitr)
require(kableExtra)
require(sjPlot)
require(ggplot2)
require(table1)
df<-read.csv('BRFSS_clean')
#| output: false
require(UsingR)
require(tgsify)
require(rms)
require(dplyr)
require(olsrr)
require(validate)
require(knitr)
require(kableExtra)
require(sjPlot)
require(ggplot2)
require(table1)
setwd("Desktop/OneDrive/Data Science PhD/Semester 2/Statistical Learning/Final Project/baddays")
setwd("Desktop/OneDrive/Data Science PhD/Semester 2/Statistical Learning/Final Project/baddays")
#| output: false
require(UsingR)
require(tgsify)
require(rms)
require(dplyr)
require(olsrr)
require(validate)
require(knitr)
require(kableExtra)
require(sjPlot)
require(ggplot2)
require(table1)
df<-read.csv('BRFSS_clean')
setwd("/Users/bryan/Library/CloudStorage/OneDrive-Personal/Data Science PhD/Semester 2/Statistical Learning/Final Project/baddays")
#| output: false
require(UsingR)
require(tgsify)
require(rms)
require(dplyr)
require(olsrr)
require(validate)
require(knitr)
require(kableExtra)
require(sjPlot)
require(ggplot2)
require(table1)
df<-read.csv('BRFSS_clean.csv')
#Train/Test Split
#make it reproducible
set.seed(1)
#use 80% of dataset as training set and 20% as test set
sample <- sample(c(TRUE, FALSE), nrow(df), replace=FALSE, prob=c(0.8,0.2))
?sample
#| output: false
require(UsingR)
require(tgsify)
require(rms)
require(dplyr)
require(olsrr)
require(validate)
require(knitr)
require(kableExtra)
require(sjPlot)
require(ggplot2)
require(table1)
df<-read.csv('BRFSS_clean.csv')
#Train/Test Split
#make it reproducible
set.seed(1)
#use 80% of dataset as training set and 20% as test set
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.8,0.2))
train  <- df[sample, ]
test   <- df[!sample, ]
View(df)
View(df)
head(df)
f1<- MENTHLTH ~ .
dd <- datadist(train)
options(datadist = "dd")
m1<- ols(f1, data = train, x=TRUE, y=TRUE)
